/* automatically generated by rust-bindgen 0.58.1 */

pub const NUM_SATS_GPS: u32 = 32;
pub const NUM_SATS_SBAS: u32 = 19;
pub const NUM_SATS_GLO: u32 = 28;
pub const NUM_SATS_BDS: u32 = 64;
pub const NUM_SATS_GAL: u32 = 36;
pub const NUM_SATS_QZS: u32 = 10;
pub const GPS_FIRST_PRN: u32 = 1;
pub const SBAS_FIRST_PRN: u32 = 120;
pub const GLO_FIRST_PRN: u32 = 1;
pub const BDS_FIRST_PRN: u32 = 1;
pub const GAL_FIRST_PRN: u32 = 1;
pub const QZS_FIRST_PRN: u32 = 193;
pub const FLOAT_EQUALITY_EPS: f64 = 0.000000000001;
pub const MINUTE_SECS: u32 = 60;
pub const HOUR_SECS: u32 = 3600;
pub const DAY_SECS: u32 = 86400;
pub const WEEK_SECS: u32 = 604800;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type s8 = i8;
pub type s16 = i16;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub const constellation_e_CONSTELLATION_INVALID: constellation_e = -1;
pub const constellation_e_CONSTELLATION_GPS: constellation_e = 0;
pub const constellation_e_CONSTELLATION_SBAS: constellation_e = 1;
pub const constellation_e_CONSTELLATION_GLO: constellation_e = 2;
pub const constellation_e_CONSTELLATION_BDS: constellation_e = 3;
pub const constellation_e_CONSTELLATION_QZS: constellation_e = 4;
pub const constellation_e_CONSTELLATION_GAL: constellation_e = 5;
pub const constellation_e_CONSTELLATION_COUNT: constellation_e = 6;
#[doc = " Constellation identifier."]
pub type constellation_e = ::std::os::raw::c_int;
#[doc = " Constellation identifier."]
pub use self::constellation_e as constellation_t;
extern "C" {
    pub fn constellation_to_string(cons: constellation_t) -> *const ::std::os::raw::c_char;
}
pub const code_e_CODE_INVALID: code_e = -1;
pub const code_e_CODE_GPS_L1CA: code_e = 0;
pub const code_e_CODE_GPS_L2CM: code_e = 1;
pub const code_e_CODE_SBAS_L1CA: code_e = 2;
pub const code_e_CODE_GLO_L1OF: code_e = 3;
pub const code_e_CODE_GLO_L2OF: code_e = 4;
pub const code_e_CODE_GPS_L1P: code_e = 5;
pub const code_e_CODE_GPS_L2P: code_e = 6;
pub const code_e_CODE_GPS_L2CL: code_e = 7;
pub const code_e_CODE_GPS_L2CX: code_e = 8;
pub const code_e_CODE_GPS_L5I: code_e = 9;
pub const code_e_CODE_GPS_L5Q: code_e = 10;
pub const code_e_CODE_GPS_L5X: code_e = 11;
pub const code_e_CODE_BDS2_B1: code_e = 12;
pub const code_e_CODE_BDS2_B2: code_e = 13;
pub const code_e_CODE_GAL_E1B: code_e = 14;
pub const code_e_CODE_GAL_E1C: code_e = 15;
pub const code_e_CODE_GAL_E1X: code_e = 16;
pub const code_e_CODE_GAL_E6B: code_e = 17;
pub const code_e_CODE_GAL_E6C: code_e = 18;
pub const code_e_CODE_GAL_E6X: code_e = 19;
pub const code_e_CODE_GAL_E7I: code_e = 20;
pub const code_e_CODE_GAL_E7Q: code_e = 21;
pub const code_e_CODE_GAL_E7X: code_e = 22;
pub const code_e_CODE_GAL_E8I: code_e = 23;
pub const code_e_CODE_GAL_E8Q: code_e = 24;
pub const code_e_CODE_GAL_E8X: code_e = 25;
pub const code_e_CODE_GAL_E5I: code_e = 26;
pub const code_e_CODE_GAL_E5Q: code_e = 27;
pub const code_e_CODE_GAL_E5X: code_e = 28;
pub const code_e_CODE_GLO_L1P: code_e = 29;
pub const code_e_CODE_GLO_L2P: code_e = 30;
pub const code_e_CODE_QZS_L1CA: code_e = 31;
pub const code_e_CODE_QZS_L1CI: code_e = 32;
pub const code_e_CODE_QZS_L1CQ: code_e = 33;
pub const code_e_CODE_QZS_L1CX: code_e = 34;
pub const code_e_CODE_QZS_L2CM: code_e = 35;
pub const code_e_CODE_QZS_L2CL: code_e = 36;
pub const code_e_CODE_QZS_L2CX: code_e = 37;
pub const code_e_CODE_QZS_L5I: code_e = 38;
pub const code_e_CODE_QZS_L5Q: code_e = 39;
pub const code_e_CODE_QZS_L5X: code_e = 40;
pub const code_e_CODE_SBAS_L5I: code_e = 41;
pub const code_e_CODE_SBAS_L5Q: code_e = 42;
pub const code_e_CODE_SBAS_L5X: code_e = 43;
pub const code_e_CODE_BDS3_B1CI: code_e = 44;
pub const code_e_CODE_BDS3_B1CQ: code_e = 45;
pub const code_e_CODE_BDS3_B1CX: code_e = 46;
pub const code_e_CODE_BDS3_B5I: code_e = 47;
pub const code_e_CODE_BDS3_B5Q: code_e = 48;
pub const code_e_CODE_BDS3_B5X: code_e = 49;
pub const code_e_CODE_BDS3_B7I: code_e = 50;
pub const code_e_CODE_BDS3_B7Q: code_e = 51;
pub const code_e_CODE_BDS3_B7X: code_e = 52;
pub const code_e_CODE_BDS3_B3I: code_e = 53;
pub const code_e_CODE_BDS3_B3Q: code_e = 54;
pub const code_e_CODE_BDS3_B3X: code_e = 55;
pub const code_e_CODE_GPS_L1CI: code_e = 56;
pub const code_e_CODE_GPS_L1CQ: code_e = 57;
pub const code_e_CODE_GPS_L1CX: code_e = 58;
pub const code_e_CODE_AUX_GPS: code_e = 59;
pub const code_e_CODE_AUX_SBAS: code_e = 60;
pub const code_e_CODE_AUX_GAL: code_e = 61;
pub const code_e_CODE_AUX_QZS: code_e = 62;
pub const code_e_CODE_AUX_BDS: code_e = 63;
pub const code_e_CODE_COUNT: code_e = 64;
#[doc = " Code identifier."]
pub type code_e = ::std::os::raw::c_int;
#[doc = " Code identifier."]
pub use self::code_e as code_t;
extern "C" {
    pub fn code_string_to_enum(code_label: *const ::std::os::raw::c_char) -> code_t;
}
#[doc = " GNSS signal identifier."]
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct gnss_signal_t {
    pub sat: u16_,
    pub code: code_t,
}
#[test]
fn bindgen_test_layout_gnss_signal_t() {
    assert_eq!(
        ::std::mem::size_of::<gnss_signal_t>(),
        8usize,
        concat!("Size of: ", stringify!(gnss_signal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gnss_signal_t>(),
        4usize,
        concat!("Alignment of ", stringify!(gnss_signal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_signal_t>())).sat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_signal_t),
            "::",
            stringify!(sat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_signal_t>())).code as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_signal_t),
            "::",
            stringify!(code)
        )
    );
}
extern "C" {
    pub fn is_gps(code: code_t) -> bool;
}
extern "C" {
    pub fn is_sbas(code: code_t) -> bool;
}
extern "C" {
    pub fn is_glo(code: code_t) -> bool;
}
extern "C" {
    pub fn is_bds2(code: code_t) -> bool;
}
extern "C" {
    pub fn is_gal(code: code_t) -> bool;
}
extern "C" {
    pub fn is_qzss(code: code_t) -> bool;
}
extern "C" {
    pub fn sid_to_constellation(sid: gnss_signal_t) -> constellation_t;
}
extern "C" {
    pub fn sid_valid(sid: gnss_signal_t) -> bool;
}
extern "C" {
    pub fn code_to_constellation(code: code_t) -> constellation_t;
}
extern "C" {
    pub fn sid_to_carr_freq(sid: gnss_signal_t) -> f64;
}
extern "C" {
    pub fn code_to_string(code: code_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn code_to_chip_count(code: code_t) -> u32_;
}
extern "C" {
    pub fn code_to_chip_rate(code: code_t) -> f64;
}
extern "C" {
    pub fn constellation_to_sat_count(gnss: constellation_t) -> u16_;
}
extern "C" {
    pub fn code_to_sig_count(code: code_t) -> u16_;
}
#[doc = " Structure representing a GPS time."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct gps_time_t {
    #[doc = "< Seconds since the GPS start of week."]
    pub tow: f64,
    #[doc = "< GPS week number."]
    pub wn: s16,
}
#[test]
fn bindgen_test_layout_gps_time_t() {
    assert_eq!(
        ::std::mem::size_of::<gps_time_t>(),
        16usize,
        concat!("Size of: ", stringify!(gps_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gps_time_t>(),
        8usize,
        concat!("Alignment of ", stringify!(gps_time_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gps_time_t>())).tow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_time_t),
            "::",
            stringify!(tow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gps_time_t>())).wn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_time_t),
            "::",
            stringify!(wn)
        )
    );
}
extern "C" {
    pub fn gps_time_valid(t: *const gps_time_t) -> bool;
}
extern "C" {
    pub fn gpsdifftime(end: *const gps_time_t, beginning: *const gps_time_t) -> f64;
}
extern "C" {
    pub fn add_secs(time: *mut gps_time_t, secs: f64);
}
extern "C" {
    pub fn llhrad2deg(llh_rad: *const [f64; 3usize], llh_deg: *mut [f64; 3usize]);
}
extern "C" {
    pub fn llhdeg2rad(llh_deg: *const [f64; 3usize], llh_rad: *mut [f64; 3usize]);
}
extern "C" {
    pub fn wgsllh2ecef(llh: *const [f64; 3usize], ecef: *mut [f64; 3usize]);
}
extern "C" {
    pub fn wgsecef2llh(ecef: *const [f64; 3usize], llh: *mut [f64; 3usize]);
}
extern "C" {
    pub fn wgsecef2azel(
        ecef: *const [f64; 3usize],
        ref_ecef: *const [f64; 3usize],
        azimuth: *mut f64,
        elevation: *mut f64,
    );
}
#[doc = " Structure holding Klobuchar ionospheric model parameters."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct ionosphere_t {
    #[doc = "< Reference time of almanac."]
    pub toa: gps_time_t,
    pub a0: f64,
    pub a1: f64,
    pub a2: f64,
    pub a3: f64,
    pub b0: f64,
    pub b1: f64,
    pub b2: f64,
    pub b3: f64,
}
#[test]
fn bindgen_test_layout_ionosphere_t() {
    assert_eq!(
        ::std::mem::size_of::<ionosphere_t>(),
        80usize,
        concat!("Size of: ", stringify!(ionosphere_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ionosphere_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ionosphere_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).toa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(toa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).a0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).a1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).a2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).a3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(a3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).b0 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(b0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).b1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).b2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ionosphere_t>())).b3 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ionosphere_t),
            "::",
            stringify!(b3)
        )
    );
}
extern "C" {
    pub fn calc_ionosphere(
        t_gps: *const gps_time_t,
        lat_u: f64,
        lon_u: f64,
        a: f64,
        e: f64,
        i: *const ionosphere_t,
    ) -> f64;
}
extern "C" {
    pub fn decode_iono_parameters(words: *const [u32_; 8usize], i: *mut ionosphere_t) -> bool;
}
extern "C" {
    pub fn calc_troposphere(t_gps: *const gps_time_t, lat: f64, h: f64, el: f64) -> f64;
}
pub const ephemeris_status_t_EPH_NULL: ephemeris_status_t = 0;
pub const ephemeris_status_t_EPH_INVALID: ephemeris_status_t = 1;
pub const ephemeris_status_t_EPH_WN_EQ_0: ephemeris_status_t = 2;
pub const ephemeris_status_t_EPH_FIT_INTERVAL_EQ_0: ephemeris_status_t = 3;
pub const ephemeris_status_t_EPH_UNHEALTHY: ephemeris_status_t = 4;
pub const ephemeris_status_t_EPH_TOO_OLD: ephemeris_status_t = 5;
pub const ephemeris_status_t_EPH_INVALID_SID: ephemeris_status_t = 6;
pub const ephemeris_status_t_EPH_INVALID_IOD: ephemeris_status_t = 7;
pub const ephemeris_status_t_EPH_VALID: ephemeris_status_t = 8;
pub type ephemeris_status_t = ::std::os::raw::c_uint;
#[doc = " Structure containing the GPS ephemeris for one satellite."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ephemeris_kepler_t {
    pub tgd: ephemeris_kepler_t__bindgen_ty_1,
    #[doc = "< Amplitude of the cosine harmonic correction term"]
    #[doc = "to the orbit radius [m]"]
    pub crc: f64,
    #[doc = "< Amplitude of the sine harmonic correction term"]
    #[doc = "to the orbit radius [m]"]
    pub crs: f64,
    #[doc = "< Amplitude of the cosine harmonic correction term"]
    #[doc = "to the argument of latitude [rad]"]
    pub cuc: f64,
    #[doc = "< Amplitude of the sine harmonic correction term"]
    #[doc = "to the argument of latitude [rad]"]
    pub cus: f64,
    #[doc = "< Amplitude of the cosine harmonic correction term"]
    #[doc = "to the angle of inclination [rad]"]
    pub cic: f64,
    #[doc = "< Amplitude of the sine harmonic correction term"]
    #[doc = "to the angle of inclination [rad]"]
    pub cis: f64,
    #[doc = "< Mean motion difference from computed value"]
    #[doc = "[rad/s]"]
    pub dn: f64,
    #[doc = "< Mean anomaly at reference time [rad]"]
    pub m0: f64,
    #[doc = "< Eccentricity, dimensionless"]
    pub ecc: f64,
    #[doc = "< Square root of the semi-major axis [sqrt(m)]"]
    pub sqrta: f64,
    #[doc = "< Longitude of ascending node"]
    #[doc = "of orbit plane at weekly epoch [rad]"]
    pub omega0: f64,
    #[doc = "< Rate of right ascension [rad/s]"]
    pub omegadot: f64,
    #[doc = "< Argument of perigee [rad]"]
    pub w: f64,
    #[doc = "< Inclindation angle at reference time [rad]"]
    pub inc: f64,
    #[doc = "< Rate of inclination angle [rad/s]"]
    pub inc_dot: f64,
    #[doc = "< Time offset of the sat clock [s]"]
    pub af0: f64,
    #[doc = "< Drift of the sat clock [s/s]"]
    pub af1: f64,
    #[doc = "< Acceleration of the sat clock [s/s^2]"]
    pub af2: f64,
    #[doc = "< Reference time of clock."]
    pub toc: gps_time_t,
    #[doc = "< Issue of data clock. Not suitable as a lookup key,"]
    #[doc = "see get_ephemeris_key()."]
    #[doc = ""]
    #[doc = "Source of value:"]
    #[doc = "- GPS LNAV: IS-GPS-200K Table 20-I “IODC”"]
    #[doc = "- GPS CNAV: IS-GPS-200K Table 30-III “t_oc”"]
    #[doc = "- GPS CNAV-2: IS-GPS-800F Table 3.5-1 “t_oe”"]
    #[doc = "- Galileo I/NAV: Galileo OS SIS ICD Issue 1.3 Tables 39 to 42"]
    #[doc = "“IOD_nav”"]
    #[doc = "- Galileo F/NAV: Galileo OS SIS ICD Issue 1.3 Tables 27 to 30"]
    #[doc = "“IOD_nav”"]
    #[doc = "- BDS D1 NAV: BDS-SIS-ICD-2.1 Table 5-7 “t_oc” where IODE = mod"]
    #[doc = "(t_oe / 720, 240) per RTCM/CSNO recommendation"]
    #[doc = "- BDS D2 NAV: BDS-SIS-ICD-2.1 Table 5-7 “t_oc” where IODC = mod"]
    #[doc = "(t_oc / 720, 240) per RTCM/CSNO recommendation"]
    #[doc = "- BDS B-CNAV1: BDS-SIS-ICD-B1C-1.0 Table 6-2 “IODC”"]
    #[doc = "- BDS B-CNAV2: BDS-SIS-ICD-B2a-1.0 Table 6-1 “IODC”"]
    #[doc = "- QZSS LNAV: IS-QZSS-PNT-003 Table 4.1.2-4 “IODC”"]
    #[doc = "- QZSS CNAV: IS-QZSS-PNT-003 Table 4.3.2-8 “t_oc”"]
    #[doc = "- QZSS CNAV-2: IS-QZSS-PNT-003 Table 4.2.2-4 “t_oe”"]
    pub iodc: u16_,
    #[doc = "< Issue of data ephemeris. Not suitable as a lookup key,"]
    #[doc = "see get_ephemeris_key()."]
    #[doc = ""]
    #[doc = "Source of value:"]
    #[doc = "- GPS LNAV: IS-GPS-200K Table 20-II “IODE”"]
    #[doc = "- GPS CNAV: IS-GPS-750F Table 20-I “t_oe”"]
    #[doc = "- GPS CNAV-2: IS-GPS-800F Table 3.5-1 “t_oe”"]
    #[doc = "- Galileo I/NAV: Galileo OS SIS ICD Issue 1.3 Tables 39 to 42"]
    #[doc = "“IOD_nav”"]
    #[doc = "- Galileo F/NAV: Galileo OS SIS ICD Issue 1.3 Tables 27 to 30"]
    #[doc = "“IOD_nav”"]
    #[doc = "- BDS D1 NAV: BDS-SIS-ICD-2.1 Table 5-10 “t_oe” where IODE ="]
    #[doc = "mod (t_oe / 720, 240) per RTCM/CSNO recommendation"]
    #[doc = "- BDS D2 NAV: BDS-SIS-ICD-2.1 Table 5-10 “t_oe” where IODE ="]
    #[doc = "mod (t_oe / 720, 240) per RTCM/CSNO recommendation"]
    #[doc = "- BDS B-CNAV1: BDS-SIS-ICD-B1C-1.0 Table 6-2 “IODE”"]
    #[doc = "- BDS B-CNAV2: BDS-SIS-ICD-B2a-1.0 Table 6-1 “IODE”"]
    #[doc = "- QZSS LNAV: IS-QZSS-PNT-003 Tables 4.1.2-7 to 4.1.2-8 “IODE”"]
    #[doc = "- QZSS CNAV: IS-QZSS-PNT-003 Table 4.3.2-4 “t_oe”"]
    #[doc = "- QZSS CNAV-2: IS-QZSS-PNT-003 Table 4.2.2-4 “t_oe”"]
    pub iode: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ephemeris_kepler_t__bindgen_ty_1 {
    #[doc = "< GPS TGD"]
    pub gps_s: [f32; 2usize],
    #[doc = "< QZSS TGD"]
    pub qzss_s: [f32; 2usize],
    #[doc = "< tgd_bds_s[0] = BDS TGD1,"]
    #[doc = "tgd_bds_s[1] = BDS TGD2"]
    pub bds_s: [f32; 2usize],
    #[doc = "< tgd_gal_s[0] = GAL E5a/E1 BGD,"]
    #[doc = "tgd_gal_s[1] = GAL E5b/E1 BGD"]
    pub gal_s: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_ephemeris_kepler_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ephemeris_kepler_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ephemeris_kepler_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ephemeris_kepler_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ephemeris_kepler_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ephemeris_kepler_t__bindgen_ty_1>())).gps_s as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t__bindgen_ty_1),
            "::",
            stringify!(gps_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ephemeris_kepler_t__bindgen_ty_1>())).qzss_s as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t__bindgen_ty_1),
            "::",
            stringify!(qzss_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ephemeris_kepler_t__bindgen_ty_1>())).bds_s as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t__bindgen_ty_1),
            "::",
            stringify!(bds_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ephemeris_kepler_t__bindgen_ty_1>())).gal_s as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t__bindgen_ty_1),
            "::",
            stringify!(gal_s)
        )
    );
}
#[test]
fn bindgen_test_layout_ephemeris_kepler_t() {
    assert_eq!(
        ::std::mem::size_of::<ephemeris_kepler_t>(),
        176usize,
        concat!("Size of: ", stringify!(ephemeris_kepler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ephemeris_kepler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ephemeris_kepler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).tgd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(tgd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).crc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).crs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(crs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).cuc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(cuc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).cus as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(cus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).cic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(cic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).cis as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(cis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).dn as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(dn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).m0 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(m0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).ecc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(ecc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).sqrta as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(sqrta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).omega0 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(omega0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).omegadot as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(omegadot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).w as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).inc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).inc_dot as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(inc_dot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).af0 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(af0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).af1 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(af1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).af2 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(af2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).toc as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(toc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).iodc as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(iodc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_kepler_t>())).iode as *const _ as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_kepler_t),
            "::",
            stringify!(iode)
        )
    );
}
#[doc = " Structure containing the SBAS ephemeris for one satellite."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct ephemeris_xyz_t {
    #[doc = "< Position of the GEO at time toe [m]"]
    pub pos: [f64; 3usize],
    #[doc = "< velocity of the GEO at time toe [m/s]"]
    pub vel: [f64; 3usize],
    #[doc = "< velocity of the GEO at time toe [m/s^2]"]
    pub acc: [f64; 3usize],
    #[doc = "< Time offset of the GEO clock w.r.t. SNT [s]"]
    pub a_gf0: f64,
    #[doc = "< Drift of the GEO clock w.r.t. SNT [s/s]"]
    pub a_gf1: f64,
}
#[test]
fn bindgen_test_layout_ephemeris_xyz_t() {
    assert_eq!(
        ::std::mem::size_of::<ephemeris_xyz_t>(),
        88usize,
        concat!("Size of: ", stringify!(ephemeris_xyz_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ephemeris_xyz_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ephemeris_xyz_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_xyz_t>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_xyz_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_xyz_t>())).vel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_xyz_t),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_xyz_t>())).acc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_xyz_t),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_xyz_t>())).a_gf0 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_xyz_t),
            "::",
            stringify!(a_gf0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_xyz_t>())).a_gf1 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_xyz_t),
            "::",
            stringify!(a_gf1)
        )
    );
}
#[doc = " Structure containing the GLONASS ephemeris for one satellite."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct ephemeris_glo_t {
    #[doc = "< Relative deviation of predicted carrier frequency"]
    #[doc = "from nominal value, dimensionless"]
    pub gamma: f64,
    #[doc = "< Correction to the SV time [s]"]
    pub tau: f64,
    #[doc = "< Equipment delay between L1 and L2 [s]"]
    pub d_tau: f64,
    #[doc = "< Position of the SV at tb in PZ-90.02 coordinates"]
    #[doc = "system [m]"]
    pub pos: [f64; 3usize],
    #[doc = "< Velocity vector of the SV at tb in PZ-90.02"]
    #[doc = "coordinates system [m/s]"]
    pub vel: [f64; 3usize],
    #[doc = "< Acceleration vector of the SV at tb in PZ-90.02"]
    #[doc = "coordinates system [m/s^2]"]
    pub acc: [f64; 3usize],
    #[doc = "< Frequency slot associated with the GLO SV"]
    pub fcn: u16_,
    #[doc = "< Issue of data. Not suitable as a lookup key,"]
    #[doc = "see get_ephemeris_key()"]
    #[doc = ""]
    #[doc = "Source of value:"]
    #[doc = "- GLONASS FDMA: GLONASS ICD L1 L2 Edition 5.1 Table 4.5 “t_b”"]
    #[doc = "- GLONASS CDMA: GLONASS ICD CDMA L1 Edition 1.0 Table 5.2 “t_b”"]
    pub iod: u8_,
}
#[test]
fn bindgen_test_layout_ephemeris_glo_t() {
    assert_eq!(
        ::std::mem::size_of::<ephemeris_glo_t>(),
        104usize,
        concat!("Size of: ", stringify!(ephemeris_glo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ephemeris_glo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ephemeris_glo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).gamma as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).tau as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).d_tau as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(d_tau)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).pos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).vel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).acc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).fcn as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(fcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_glo_t>())).iod as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_glo_t),
            "::",
            stringify!(iod)
        )
    );
}
#[doc = " Structure containing the ephemeris for one satellite."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ephemeris_t {
    #[doc = "< Signal ID."]
    pub sid: gnss_signal_t,
    #[doc = "< Reference time of ephemeris."]
    pub toe: gps_time_t,
    #[doc = "< User range accuracy [m]"]
    pub ura: f32,
    #[doc = "< Curve fit interval [s]"]
    pub fit_interval: u32_,
    #[doc = "< Ephemeris is valid."]
    pub valid: u8_,
    #[doc = "< Satellite health status."]
    pub health_bits: u8_,
    #[doc = "< Nav data source of ephemeris"]
    pub source: u8_,
    pub __bindgen_anon_1: ephemeris_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ephemeris_t__bindgen_ty_1 {
    #[doc = "< Parameters specific to GPS."]
    pub kepler: ephemeris_kepler_t,
    #[doc = "< Parameters specific to SBAS."]
    pub xyz: ephemeris_xyz_t,
    #[doc = "< Parameters specific to GLONASS."]
    pub glo: ephemeris_glo_t,
}
#[test]
fn bindgen_test_layout_ephemeris_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ephemeris_t__bindgen_ty_1>(),
        176usize,
        concat!("Size of: ", stringify!(ephemeris_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ephemeris_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ephemeris_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ephemeris_t__bindgen_ty_1>())).kepler as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t__bindgen_ty_1),
            "::",
            stringify!(kepler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t__bindgen_ty_1>())).xyz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t__bindgen_ty_1),
            "::",
            stringify!(xyz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t__bindgen_ty_1>())).glo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t__bindgen_ty_1),
            "::",
            stringify!(glo)
        )
    );
}
#[test]
fn bindgen_test_layout_ephemeris_t() {
    assert_eq!(
        ::std::mem::size_of::<ephemeris_t>(),
        216usize,
        concat!("Size of: ", stringify!(ephemeris_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ephemeris_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ephemeris_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).toe as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(toe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).ura as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(ura)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).fit_interval as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(fit_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).valid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).health_bits as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(health_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ephemeris_t>())).source as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ephemeris_t),
            "::",
            stringify!(source)
        )
    );
}
pub const satellite_orbit_type_t_GEO: satellite_orbit_type_t = 0;
pub const satellite_orbit_type_t_IGSO: satellite_orbit_type_t = 1;
pub const satellite_orbit_type_t_MEO: satellite_orbit_type_t = 2;
pub type satellite_orbit_type_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn calc_sat_state(
        e: *const ephemeris_t,
        t: *const gps_time_t,
        pos: *mut [f64; 3usize],
        vel: *mut [f64; 3usize],
        acc: *mut [f64; 3usize],
        clock_err: *mut f64,
        clock_rate_err: *mut f64,
    ) -> s8;
}
extern "C" {
    pub fn calc_sat_az_el(
        e: *const ephemeris_t,
        t: *const gps_time_t,
        ref_: *const [f64; 3usize],
        orbit_type: satellite_orbit_type_t,
        az: *mut f64,
        el: *mut f64,
        check_e: bool,
    ) -> s8;
}
extern "C" {
    pub fn calc_sat_doppler(
        e: *const ephemeris_t,
        t: *const gps_time_t,
        ref_pos: *const [f64; 3usize],
        ref_vel: *const [f64; 3usize],
        orbit_type: satellite_orbit_type_t,
        doppler: *mut f64,
    ) -> s8;
}
extern "C" {
    pub fn get_ephemeris_status_t(e: *const ephemeris_t) -> ephemeris_status_t;
}
extern "C" {
    pub fn ephemeris_valid_detailed(
        e: *const ephemeris_t,
        t: *const gps_time_t,
    ) -> ephemeris_status_t;
}
extern "C" {
    pub fn ephemeris_valid(e: *const ephemeris_t, t: *const gps_time_t) -> u8_;
}
extern "C" {
    pub fn decode_ephemeris(
        frame_words: *const [[u32_; 8usize]; 3usize],
        e: *mut ephemeris_t,
        tot_tow: f64,
    );
}
extern "C" {
    pub fn decode_bds_d1_ephemeris(
        words: *const [[u32_; 10usize]; 3usize],
        sid: gnss_signal_t,
        ephe: *mut ephemeris_t,
    );
}
extern "C" {
    pub fn decode_gal_ephemeris(page: *const [[u8_; 16usize]; 5usize], eph: *mut ephemeris_t);
}
extern "C" {
    pub fn ephemeris_equal(a: *const ephemeris_t, b: *const ephemeris_t) -> bool;
}
extern "C" {
    pub fn ephemeris_healthy(ephe: *const ephemeris_t, code: code_t) -> bool;
}
extern "C" {
    pub fn crc24q(buf: *const u8_, len: u32_, crc: u32_) -> u32_;
}
#[doc = " Navigation measurement flag mask."]
#[doc = ""]
#[doc = " Mask value is any combination of the following flags:"]
#[doc = " - #NAV_MEAS_FLAG_CODE_VALID"]
#[doc = " - #NAV_MEAS_FLAG_PHASE_VALID"]
#[doc = " - #NAV_MEAS_FLAG_MEAS_DOPPLER_VALID"]
#[doc = " - #NAV_MEAS_FLAG_COMP_DOPPLER_VALID"]
#[doc = " - #NAV_MEAS_FLAG_HALF_CYCLE_KNOWN"]
#[doc = " - #NAV_MEAS_FLAG_CN0_VALID"]
#[doc = ""]
#[doc = " \\sa navigation_measurement_t"]
pub type nav_meas_flags_t = u16_;
#[doc = " Structure for processing navigation measurements"]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct navigation_measurement_t {
    #[doc = "< Raw pseudorange: time of flight"]
    #[doc = "   multiplied by speed of light [m]"]
    pub raw_pseudorange: f64,
    #[doc = "< Corrected pseudorange [m]"]
    pub pseudorange: f64,
    #[doc = "< Raw carrier phase [cycle]"]
    pub raw_carrier_phase: f64,
    #[doc = "< Corrected carrier phase [cycle]"]
    pub carrier_phase: f64,
    #[doc = "< Raw doppler from tracker [Hz]"]
    pub raw_measured_doppler: f64,
    #[doc = "< Corrected doppler from tracker [Hz]"]
    pub measured_doppler: f64,
    #[doc = "< Raw doppler from time difference of"]
    #[doc = "   carrier phase [Hz]"]
    pub raw_computed_doppler: f64,
    #[doc = "< Corrected doppler from time"]
    #[doc = "   difference of carrier phase [Hz]"]
    pub computed_doppler: f64,
    #[doc = "< Time difference for computed doppler [s]"]
    pub computed_doppler_dt: f64,
    #[doc = "< SV ECEF position [m]"]
    pub sat_pos: [f64; 3usize],
    #[doc = "< SV ECEF velocity [m/s]"]
    pub sat_vel: [f64; 3usize],
    #[doc = "< SV ECEF accel [m/s/s]"]
    pub sat_acc: [f64; 3usize],
    #[doc = "< Ephemeris key [unitless]"]
    pub eph_key: u16_,
    #[doc = "< SV clock error [s]"]
    pub sat_clock_err: f64,
    #[doc = "< SV clock error rate [s/s]"]
    pub sat_clock_err_rate: f64,
    #[doc = "< Carrier to noise ratio [dB-Hz]"]
    pub cn0: f64,
    #[doc = "< PLL lock time [s]"]
    pub lock_time: f64,
    #[doc = "< Approximate satellite elevation [deg]"]
    pub elevation: f64,
    #[doc = "< Time of transmit"]
    pub tot: gps_time_t,
    #[doc = "< SV signal identifier"]
    pub sid: gnss_signal_t,
    #[doc = "< Measurement flags"]
    pub flags: nav_meas_flags_t,
}
#[test]
fn bindgen_test_layout_navigation_measurement_t() {
    assert_eq!(
        ::std::mem::size_of::<navigation_measurement_t>(),
        224usize,
        concat!("Size of: ", stringify!(navigation_measurement_t))
    );
    assert_eq!(
        ::std::mem::align_of::<navigation_measurement_t>(),
        8usize,
        concat!("Alignment of ", stringify!(navigation_measurement_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).raw_pseudorange as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(raw_pseudorange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).pseudorange as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(pseudorange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).raw_carrier_phase as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(raw_carrier_phase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).carrier_phase as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(carrier_phase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).raw_measured_doppler as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(raw_measured_doppler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).measured_doppler as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(measured_doppler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).raw_computed_doppler as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(raw_computed_doppler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).computed_doppler as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(computed_doppler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).computed_doppler_dt as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(computed_doppler_dt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).sat_pos as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(sat_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).sat_vel as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(sat_vel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).sat_acc as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(sat_acc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).eph_key as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(eph_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).sat_clock_err as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(sat_clock_err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).sat_clock_err_rate as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(sat_clock_err_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<navigation_measurement_t>())).cn0 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(cn0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).lock_time as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(lock_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<navigation_measurement_t>())).elevation as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(elevation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<navigation_measurement_t>())).tot as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(tot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<navigation_measurement_t>())).sid as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<navigation_measurement_t>())).flags as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(navigation_measurement_t),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " Structure for processing navigation measurements estimated standard deviation"]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct measurement_std_t {
    #[doc = "< SV signal identifier"]
    pub sid: gnss_signal_t,
    #[doc = "< Observations ionospheric delay std [m]"]
    pub iono_std: f64,
    #[doc = "< Observations tropospheric delay std [m]"]
    pub tropo_std: f64,
    #[doc = "< Observations orbit/clock delay std [m]"]
    pub range_std: f64,
    #[doc = "< Observations fixing flags [m], see above"]
    pub flags: u8_,
}
#[test]
fn bindgen_test_layout_measurement_std_t() {
    assert_eq!(
        ::std::mem::size_of::<measurement_std_t>(),
        40usize,
        concat!("Size of: ", stringify!(measurement_std_t))
    );
    assert_eq!(
        ::std::mem::align_of::<measurement_std_t>(),
        8usize,
        concat!("Alignment of ", stringify!(measurement_std_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<measurement_std_t>())).sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(measurement_std_t),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<measurement_std_t>())).iono_std as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(measurement_std_t),
            "::",
            stringify!(iono_std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<measurement_std_t>())).tropo_std as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(measurement_std_t),
            "::",
            stringify!(tropo_std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<measurement_std_t>())).range_std as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(measurement_std_t),
            "::",
            stringify!(range_std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<measurement_std_t>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(measurement_std_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn nav_meas_flags_valid(flags: nav_meas_flags_t) -> bool;
}
extern "C" {
    pub fn pseudorange_valid(meas: *const navigation_measurement_t) -> bool;
}
extern "C" {
    pub fn encode_lock_time(nm_lock_time: f64) -> u8_;
}
extern "C" {
    pub fn decode_lock_time(sbp_lock_time: u8_) -> f64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnss_sid_set_t {
    pub sats: [u64_; 64usize],
}
#[test]
fn bindgen_test_layout_gnss_sid_set_t() {
    assert_eq!(
        ::std::mem::size_of::<gnss_sid_set_t>(),
        512usize,
        concat!("Size of: ", stringify!(gnss_sid_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gnss_sid_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(gnss_sid_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_sid_set_t>())).sats as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_sid_set_t),
            "::",
            stringify!(sats)
        )
    );
}
extern "C" {
    pub fn sid_set_init(sid_set: *mut gnss_sid_set_t);
}
extern "C" {
    pub fn sid_set_get_sat_count(sid_set: *const gnss_sid_set_t) -> u32_;
}
extern "C" {
    pub fn sid_set_get_sig_count(sid_set: *const gnss_sid_set_t) -> u32_;
}
extern "C" {
    pub fn sid_set_contains(sid_set: *const gnss_sid_set_t, sid: gnss_signal_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct dops_t {
    pub pdop: f64,
    pub gdop: f64,
    pub tdop: f64,
    pub hdop: f64,
    pub vdop: f64,
}
#[test]
fn bindgen_test_layout_dops_t() {
    assert_eq!(
        ::std::mem::size_of::<dops_t>(),
        40usize,
        concat!("Size of: ", stringify!(dops_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dops_t>(),
        8usize,
        concat!("Alignment of ", stringify!(dops_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dops_t>())).pdop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dops_t),
            "::",
            stringify!(pdop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dops_t>())).gdop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dops_t),
            "::",
            stringify!(gdop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dops_t>())).tdop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dops_t),
            "::",
            stringify!(tdop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dops_t>())).hdop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dops_t),
            "::",
            stringify!(hdop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dops_t>())).vdop as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dops_t),
            "::",
            stringify!(vdop)
        )
    );
}
extern "C" {
    pub static mut pvt_err_msg: [*const ::std::os::raw::c_char; 7usize];
}
pub const processing_strategy_t_GPS_ONLY: processing_strategy_t = 0;
pub const processing_strategy_t_ALL_CONSTELLATIONS: processing_strategy_t = 1;
pub const processing_strategy_t_GPS_L1CA_WHEN_POSSIBLE: processing_strategy_t = 2;
pub const processing_strategy_t_L1_ONLY: processing_strategy_t = 3;
pub type processing_strategy_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct gnss_solution {
    #[doc = " Receiver position latitude [deg], longitude [deg], altitude [m]"]
    pub pos_llh: [f64; 3usize],
    #[doc = " Receiver position ECEF XYZ [m]"]
    pub pos_ecef: [f64; 3usize],
    #[doc = " Receiver velocity in NED [m/s]"]
    pub vel_ned: [f64; 3usize],
    #[doc = " Receiver velocity in ECEF XYZ [m/s]"]
    pub vel_ecef: [f64; 3usize],
    pub err_cov: [f64; 7usize],
    pub vel_cov: [f64; 7usize],
    pub clock_offset: f64,
    pub clock_offset_var: f64,
    pub clock_drift: f64,
    pub clock_drift_var: f64,
    pub time: gps_time_t,
    pub valid: u8_,
    pub velocity_valid: u8_,
    pub n_sats_used: u8_,
    pub n_sigs_used: u8_,
}
#[test]
fn bindgen_test_layout_gnss_solution() {
    assert_eq!(
        ::std::mem::size_of::<gnss_solution>(),
        264usize,
        concat!("Size of: ", stringify!(gnss_solution))
    );
    assert_eq!(
        ::std::mem::align_of::<gnss_solution>(),
        8usize,
        concat!("Alignment of ", stringify!(gnss_solution))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).pos_llh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(pos_llh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).pos_ecef as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(pos_ecef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).vel_ned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(vel_ned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).vel_ecef as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(vel_ecef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).err_cov as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(err_cov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).vel_cov as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(vel_cov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).clock_offset as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(clock_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).clock_offset_var as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(clock_offset_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).clock_drift as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(clock_drift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).clock_drift_var as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(clock_drift_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).time as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).valid as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).velocity_valid as *const _ as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(velocity_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).n_sats_used as *const _ as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(n_sats_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnss_solution>())).n_sigs_used as *const _ as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(gnss_solution),
            "::",
            stringify!(n_sigs_used)
        )
    );
}
extern "C" {
    pub fn calc_PVT(
        n_used: u8_,
        nav_meas: *const [navigation_measurement_t; 0usize],
        tor: *const gps_time_t,
        disable_raim: bool,
        disable_velocity: bool,
        strategy: processing_strategy_t,
        soln: *mut gnss_solution,
        dops: *mut dops_t,
        raim_removed_sids: *mut gnss_sid_set_t,
    ) -> s8;
}
extern "C" {
    pub fn correct_iono(
        pos_ecef: *const f64,
        iono_params: *const ionosphere_t,
        n_meas: u8_,
        nav_meas: *mut navigation_measurement_t,
    );
}
extern "C" {
    pub fn correct_tropo(
        pos_ecef: *const f64,
        n_meas: u8_,
        nav_meas: *mut navigation_measurement_t,
    );
}
